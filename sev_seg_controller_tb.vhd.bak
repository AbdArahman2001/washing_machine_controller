library ieee;
use ieee.std_logic_1164.all;

entity sev_seg_controller_tb is
end sev_seg_controller_tb;

architecture behavior of sev_seg_controller_tb is

component sev_seg_controller port( 
		clk, reset : in std_logic:=  ;
		start: in std_logic := '1'; 
		user_program: in std_logic_vector (4 downto 0);
		state: in  std_logic_vector (1 downto 0);
		sev_seg_data : out std_logic_vector (6 downto 0 ) ; 
		sev_seg_driver : buffer std_logic_vector (7 downto 0)
	);
	
-- set_seg_data constants	
	
constant A: std_logic_vector(6 downto 0) := "0001000"; 
constant C: std_logic_vector(6 downto 0) := "0110001"; 
constant D: std_logic_vector(6 downto 0) := "1000010"; 
constant E: std_logic_vector(6 downto 0) := "0110000"; 
constant H: std_logic_vector(6 downto 0) := "1001000"; 
constant I: std_logic_vector(6 downto 0) := "1111001";  
constant L: std_logic_vector(6 downto 0) := "1110001"; 
constant N: std_logic_vector(6 downto 0) := "0001001"; 
constant o: std_logic_vector(6 downto 0) := "1100010"; 
constant P: std_logic_vector(6 downto 0) := "0011000"; 
constant r: std_logic_vector(6 downto 0) := "0011001"; 
constant S: std_logic_vector(6 downto 0) := "0100100"; 
constant t: std_logic_vector(6 downto 0) := "1110000"; 
constant W: std_logic_vector(6 downto 0) := "1010101"; 
constant G: std_logic_vector(6 downto 0) := "1011110"; 

-- set_seg_driver constants
constant bit_0 : std_logic_vector(7 downto 0) := "011111111";
constant bit_1 : std_logic_vector(7 downto 0) := "101111111";
constant bit_2 : std_logic_vector(7 downto 0) := "110111111";
constant bit_3 : std_logic_vector(7 downto 0) := "111011111";
constant bit_4 : std_logic_vector(7 downto 0) := "111101111";
constant bit_5 : std_logic_vector(7 downto 0) := "111110111";

signal clk_tb, reset_tb, start_tb, user_program_tb, state_tb, sev_seg_data_tb, sev_seg_driver_tb : std_logic;
begin

	uut: sev_seg_controller
		port map(
			clk => clk_tb,
			reset => reset_tb,
			start => start_tb,
			user_program => user_program_tb,
			state => state_tb,
			sev_seg_data => sev_seg_data_tb,
			sev_seg_driver => sev_seg_driver_tb,
		);
	
	tb : process
		constant period: time := 20 ns;
			begin 
		
				reset_tb <= '0'; 
				start_tb <= '1';
				
				user_program_tb <= "00001";  -- COTTON
				
				wait for period;
				assert ((state_tb = "00") and (sev_seg_data_tb = W ) and (sev_seg_driver_tb = bit_0))
				report "test failed for input state 00 and sev_seg_data W" severity error;
				
				wait for period;
				assert ((state_tb = "00") and (sev_seg_data_tb = A ) and (sev_seg_driver_tb = bit_1))
				report "test failed for input state 00 and sev_seg_data W" severity error;
				
				wait for period;
				assert ((state_tb = "00") and (sev_seg_data_tb = S ) and (sev_seg_driver_tb = bit_2))
				report "test failed for input state 00 and sev_seg_data W" severity error;
				
				wait for period;
				assert ((state_tb = "00") and (sev_seg_data_tb = H ) and (sev_seg_driver_tb = bit_3))
				report "test failed for input state 00 and sev_seg_data W" severity error;
	
	
	wait; 
	end process;
end architecture;