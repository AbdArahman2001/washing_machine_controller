library ieee;
use ieee.std_logic_1164.all;

entity washing_machine_main_cont_tb is
end washing_machine_main_cont_tb;

architecture behavior of washing_machine_main_cont_tb is

component state_controller is
	port( 
		clk, reset : in std_logic:= '0' ;
		start: in std_logic := '1'; 
		user_program: in std_logic_vector (4 downto 0);
		state: out  std_logic_vector (1 downto 0) :="00"		
	);
	end component;
	
		signal clk_tb, reset_tb :  std_logic ;
		signal start_tb:  std_logic := '1'; 
		signal state_tb : std_logic_vector(1 downto 0);
		signal user_program_tb :  std_logic_vector (4 downto 0);

	shared variable clk_counts : Integer range 0 to 100 := 0;

	
begin



	uut: state_controller
		port map(
			clk => clk_tb,
			reset => reset_tb,
			start => start_tb,
			user_program => user_program_tb,
			state => state_tb
		);
		
			
	tb : process
	
		-- set_seg_data constants	
	constant A: std_logic_vector(6 downto 0) := "0001000"; 
	constant C: std_logic_vector(6 downto 0) := "0110001"; 
	constant D: std_logic_vector(6 downto 0) := "1000010"; 
	constant E: std_logic_vector(6 downto 0) := "0110000"; 
	constant H: std_logic_vector(6 downto 0) := "1001000"; 
	constant I: std_logic_vector(6 downto 0) := "1111001";  
	constant L: std_logic_vector(6 downto 0) := "1110001"; 
	constant N: std_logic_vector(6 downto 0) := "0001001"; 
	constant o: std_logic_vector(6 downto 0) := "1100010"; 
	constant P: std_logic_vector(6 downto 0) := "0011000"; 
	constant r: std_logic_vector(6 downto 0) := "0011001"; 
	constant S: std_logic_vector(6 downto 0) := "0100100"; 
	constant t: std_logic_vector(6 downto 0) := "1110000"; 
	constant W: std_logic_vector(6 downto 0) := "1010101"; 
	constant G: std_logic_vector(6 downto 0) := "1011110"; 

	-- set_seg_driver constants
	constant no_one : std_logic_vector(7 downto 0) := "11111111";
	constant bit_0 : std_logic_vector(7 downto 0) := "01111111";
	constant bit_1 : std_logic_vector(7 downto 0) := "10111111";
	constant bit_2 : std_logic_vector(7 downto 0) := "11011111";
	constant bit_3 : std_logic_vector(7 downto 0) := "11101111";
	constant bit_4 : std_logic_vector(7 downto 0) := "11110111";
	constant bit_5 : std_logic_vector(7 downto 0) := "11111011";
	
	
			begin 
		
				reset_tb <= '0'; 
				start_tb <= '1';
				
				user_program_tb <= "00001";  -- COTTON
				
				wait until (rising_edge(clk_tb) and (clk_counts = 1)) ;
				assert (state_tb = "00")
				report "test failed for program COTTON state 00" severity error;
				
				wait until (rising_edge(clk_tb) and (clk_counts = 4)) ;
				assert (state_tb = "01")
				report "test failed for program COTTON state 01" severity error;
				
				wait until (rising_edge(clk_tb) and (clk_counts = 9)) ;
				assert (state_tb = "10")
				report "test failed for program COTTON state 10" severity error;
				
				wait until (rising_edge(clk_tb) and (clk_counts = 11)) ;
				assert (state_tb = "11")
				report "test failed for program COTTON state 11" severity error;
				
				clk_counts :=0;
				user_program_tb <= "00010";  -- RAPID
				
				wait until (rising_edge(clk_tb) and (clk_counts = 1)) ;
				assert (state_tb = "00")
				report "test failed for program RAPID state 00" severity error;
				
				wait until (rising_edge(clk_tb) and (clk_counts = 3)) ;
				assert (state_tb = "01")
				report "test failed for program RAPID state 01" severity error;
				
				wait until (rising_edge(clk_tb) and (clk_counts = 5)) ;
				assert (state_tb = "10")
				report "test failed for program RAPID state 10" severity error;
				
				wait until (rising_edge(clk_tb) and (clk_counts = 7)) ;
				assert (state_tb = "11")
				report "test failed for program RAPID state 11" severity error;
				
				clk_counts :=0;
				user_program_tb <= "00100";  -- SLOW
				
				wait until (rising_edge(clk_tb) and (clk_counts = 1)) ;
				assert (state_tb = "00")
				report "test failed for program SLOW state 00" severity error;
				
				wait until (rising_edge(clk_tb) and (clk_counts = 6)) ;
				assert (state_tb = "01")
				report "test failed for program SLOW state 01" severity error;
				
				wait until (rising_edge(clk_tb) and (clk_counts = 11)) ;
				assert (state_tb = "10")
				report "test failed for program SLOW state 10" severity error;
				
				wait until (rising_edge(clk_tb) and (clk_counts = 13)) ;
				assert (state_tb = "11")
				report "test failed for program SLOW state 11" severity error;
				
				clk_counts :=0;
				user_program_tb <= "01000";  -- DRAIN
				
				wait until (rising_edge(clk_tb) and (clk_counts = 1)) ;
				assert (state_tb = "00")
				report "test failed for program DRAIN state 00" severity error;
				
				wait until (rising_edge(clk_tb) and (clk_counts = 3)) ;
				assert (state_tb = "01")
				report "test failed for program DRAIN state 01" severity error;
				
				wait until (rising_edge(clk_tb) and (clk_counts = 5)) ;
				assert (state_tb = "10")
				report "test failed for program DRAIN state 10" severity error;
				
				wait until (rising_edge(clk_tb) and (clk_counts = 6)) ;
				assert (state_tb = "11")
				report "test failed for program DRAIN state 11" severity error;
				
				clk_counts :=0;
				user_program_tb <= "10000";  -- WHITE
				
				wait until (rising_edge(clk_tb) and (clk_counts = 1)) ;
				assert (state_tb = "00")
				report "test failed for program WHITE state 00" severity error;
				
				wait until (rising_edge(clk_tb) and (clk_counts = 4)) ;
				assert (state_tb = "01")
				report "test failed for program WHITE state 01" severity error;
				
				wait until (rising_edge(clk_tb) and (clk_counts = 7)) ;
				assert (state_tb = "10")
				report "test failed for program WHITE state 10" severity error;
				
				wait until (rising_edge(clk_tb) and (clk_counts = 9)) ;
				assert (state_tb = "11")
				report "test failed for program WHITE state 11" severity error;
	
	
	wait; 
	end process;
	
	clk_source : process  -- 20 ns clock
	
	constant period: time := 5 ps;
	constant end_time: time :=  6000 ps;
		begin
		 clk_tb <= '0';
		wait for period;
		clk_tb <= '1';
		wait for period;
		clk_counts := clk_counts +1;
		if(now >= end_time) then
		wait;
		end if;
		end process;
		
		
end architecture;